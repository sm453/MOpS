/*
  Author(s):      Matthew Celnik (msc37)
  Project:        sweep (population balance solver)

  File purpose:
    A premixed flame time profile as generated by PREMIX.  Thereis no coupling
    between the gas-phase and the particles.

    Chemical conditions are not altered by sweep for this system.  The entire time
    profile for the system over the period of interest should be provided.  Values
    in between time points are found by linear interpolation.
*/

#ifndef SWEEP_PREMIXFLAME_H
#define SWEEP_PREMIXFLAME_H

#include "swpparams.h"
#include "swpsystem.h"
#include "gpcspecieslist.h"
#include <vector>
#include <algorithm>
#include <map>
#include <string>

using namespace std;

namespace Sweep
{
class PremixFlame : public System
{
protected:
    /* Time profile of gas-phase species, temperature and pressure. T and P occupy the
       last two vector entries respectively. */
    map<real, vector<real>> m_profile;
    unsigned int m_iT, m_iP; // Indices of temperature and pressure in the profile vectors.
public:
    PremixFlame(void);
    ~PremixFlame(void);
public: // Definition of pure virtuals.
    void SetSpeciesList(SpeciesList &list);
    real GetTemperature(const real t) const;
    real GetPressure(const real t) const;
    real GetSpeciesConc(const unsigned int i, const real t) const;
    real GetSpeciesConc(const string name, const real t) const;
    void GetSpeciesConcs(const real t, vector<real> &chem) const;
    void GetConditions(const real time, vector<real> &chem, real &T, real &P) const;
    inline void SetTemperature(const real t) {};
    inline void SetPressure(const real p) {};
    inline void SetSpeciesConc(const unsigned int i, const real c) {};
    /* Adds the given value to the required species concentration. */
    inline void AdjustSpeciesConc(const unsigned int i, const real delta) {};
    /* Sets the initial conditions and sets the current conditions to those. */
    void SetInitConditions(const real time, const vector<real> &chem, const real T, const real P){};
public: // Additional property gets.
    /* Returns the temperature and pressure at given time. */
    inline void GetTP(const real time, real T, real P) const {
        map<real,vector<real>>::const_iterator iter = FindTime(time);
        T = iter->second[m_iT];
        P = iter->second[m_iP];
    };
public: // Profile assignment.
    /* Sets the whole time profile given a vector of times and the profile. Returns
       zero on success, otherwise negative. */
    int SetProfile(const vector<real> &times, const vector<vector<real>> &profile);
    /* Adds a time point to the profile. Returns 0 on success, otherwise negative. */
    int AddTimePoint(const real t, const vector<real> conditions);
    /* Reads the profile data and the species list from file.  The current species
       list is invalidated.  Returns 0 on success, otherwise less than zero. */
    int ReadProfile(const string &filename);
protected:
    // Finds the nearest time less than the given time in the profile.  If the
    // given time is greater than all profile times, then returns the last element.
    map<real,vector<real>>::const_iterator FindTime(const real t) const;
};
};

#endif