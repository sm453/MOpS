/*
  Author(s):      Matthew Celnik (msc37)
  Project:        sweep (population balance solver)

  File purpose:
    The ModelStats class is the base class for the vital statistics
    generated by particle models.  Vital stats are a subset of information
    about a particle ensemble that are useful as outputs, but cannot
    be used to reconstruct the ensemble.  Serialization should be used
    for that.
*/

#ifndef SWEEP_MODELSTATS_H
#define SWEEP_MODELSTATS_H

#include "swp_params.h"
#include "swp_particle_cache.h"
#include "swp_ensemble.h"
#include "swp_submodel_type.h"
#include <vector>
#include <string>
#include <iostream>

namespace Sweep
{
namespace Stats
{
class IModelStats
{
public:
    // Virtual destructor.
    virtual ~IModelStats() {};

    // Returns the number of stats for this model.
    virtual unsigned int Count(void) const = 0;

    // Calculates the model stats for a single particle.
    virtual void Calculate(const ParticleCache &data) = 0;

    // Calculates the model stats for a particle ensemble.
    virtual void Calculate(
        const Ensemble &e, // Ensemble from which to get stats.
        real scale = 1.0   // Scaling factor to unit volume (summed stats).
        ) = 0;

    // Returns a vector containing the stats.
    virtual const fvector &Get(void) const = 0;

    // Returns a vector containing the stats.
    virtual void Get(
        fvector &stats,        // Output vector.
        unsigned int start = 0 // Optional start index for the first stat.
        ) const = 0;

    // Returns a vector containing the stat names.
    virtual const std::vector<std::string> &Names(void) const = 0;

    // Adds to a vector containing stat names.
    virtual void Names(
        std::vector<std::string> &names, // Output vector.
        unsigned int start = 0           // Optional start index for the first stat.
        ) const = 0;


    // PARTICLE SIZE LISTS.

    // Returns the number of PSL output variables.
    virtual unsigned int PSL_Count(void) const = 0;

    // Returns a vector of PSL variable names.
    virtual void PSL_Names(
        std::vector<std::string> &names, // Vector in which to return names.
        unsigned int start = 0 // Optional start index for the first name.
        ) const = 0;

    // Returns the particle size list (PSL) entry for particle i
    // in the given ensemble.
    virtual void PSL(
        const Ensemble &ens,   // Ensemble from which to get properties.
        unsigned int i,        // Index of particle in ensemble to get.
        real time,             // The current time.
        fvector &psl,          // Output vector.
        unsigned int start = 0 // Optional start index for the first variable.
        ) const = 0;

    // Returns the PSL entry for the given particle cache.
    virtual void PSL(
        const Sweep::ParticleCache &sp, // Particle cache from which to get PSL data.
        real time,                      // Current flow time (used to calculate particle age).
        fvector &psl,                   // Output vector.
        unsigned int start = 0          // Optional start index for the first variable.
        ) const = 0;


    // READ/WRITE/COPY.

    // Creates a copy of the object.
    virtual IModelStats *const Clone(void) const = 0;

    // Returns the model data type.  Used to identify different models
    // and for serialisation.
    virtual unsigned int ID(void) const = 0;

    // Writes the object to a binary stream.
    virtual void Serialize(std::ostream &out) const = 0;

    // Reads the object from a binary stream.
    virtual void Deserialize(
        std::istream &in,                 // Input stream.
        const Sweep::ParticleModel &model // Defining particle model.
        ) = 0;

protected:
    enum StatType {
        None=-1,
        Sum, // Just sum up this stat.
        Avg  // Just average this stat.
    };

};

typedef std::map<SubModels::SubModelType,IModelStats*> ModelStatsMap;
};
};

#endif
