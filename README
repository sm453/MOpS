###############################################################################
MOPS: A suite of C++ libraries and solvers.
###############################################################################

Oh Huzzah!

Installation:

1) Set the following variables (substitute for your name/email):

    git config --global user.name "Laurence McGlashan"
    git config --global user.email "lrm29@cam.ac.uk"

2) Once cloned, execute "./INSTALL.sh". It will copy the .gitconfig file into
your .git folder and make all the Doxygen documentation which can be accessed 
by opening doc/documentationIndex.html in a web browser.

-------------------------------------------------------------------------------

CMake:

There is more than one way to use CMake to generate build files
and to generate Eclipse (and Visual Studio) project files.  If
you do not care about using an IDE and just want a clean tidy
build, scroll down to the instructions on out-of-source builds.

1) In-source build (for those who use an IDE):

This is not as tidy as option two, but is the only way (I can find)
to get proper Eclipse integration.

Before starting (ie before you read this file) you should do
mkdir workspace1
#This is where eclipse will put its workspace, which must be distinct
#from the location of the projects we are about to create.
cd workspace1
git clone ssh://riap2@vienna.cheng.cam.ac.uk/home/userspace/CoMoCommon/Codes/mops-c-Git proj
cd proj
#If you have not got this kind of set up with a dedicated directory
#above the one containing this file, you should do a fresh clone
#either from vienna as above, or from your modified code if necessary.

cmake -G"Eclipse CDT4 - Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug .

At this point you can run Eclipse and put a new workspace in workspace1.
Once in Eclipse right click in the Project Explorer on the left and select
Import.  Then choose General/Exisiting Projects into Workspace.  This will
give a new pop-up, where you should click Browse..., then select proj (or
whatever you called the directory containing this file) and click OK.
Highlight proj in the list of possible projects (it should be the only
entry) and click Finish.  Eclipse will kick off its parser and builder,
which should not take too long, but then you are up and running.
(Make sure you select the C++ perspective, eclipse generally defaults
to java.) 

To use EGit, right-click on the project and select Team > Share Project. 
Choose Git.

CMakeEd provides some useful tools for CMake integration into Eclipse.
You can install it from within Eclipse using the following download site:
http://cmakeed.sourceforge.net/eclipse/

CTest can be run by double-clicking ": test" in the Make Target panel.

With this set up you are limited to Debug builds (or Release if you specify
that when you run cmake).  To have both build types one needs to use "out
of source builds" with cmake, but that does not integrate well with eclipse.
Assuming you have done your development with a debug build and now want to
make a release build to run some big calcs, you are recommended to do the
following (an out of source build as described in 2):

Commit your changes to you local git repo (pushing to vienna is optional):
git add myfile.c
git commit -m "A ground breaking new algorithm"
cd ..
git clone proj release-tree
cd release-tree
mkdir release
cd release
cmake .. -D CMAKE_BUILD_TYPE=Release
make -j 4 #for 4 threads of compilation (more if you can!)

2) Out-source build (for those who don't use an IDE):

The KMC-ARS code requires OpenBabel built as an statically linked library for PAH optimisation.
OpenBabel version 2.3.1 is the one currently used and has been added as a submodule of mops.
The following commands build this version as a submodule:

git submodule init
git submodule update
cd openbabel-2.3.1-Git
bash build.sh
#Add openbabel environmental variables to bashrc. A reminder of these variables is shown by bash build.sh
source ~/.bashrc
cd mops_directory

#The following commands complete the out-source build of mops:
mkdir debug
cd debug
cmake -D CMAKE_BUILD_TYPE=Debug ..
make -j 4   #for 4 threads of compilation (more if you can!)
ctest -j 4  #for 4 threads of testing

AND/OR

mkdir release
cd release
cmake -D CMAKE_BUILD_TYPE=Release ..
make -j 4   #for 4 threads of compilation (more if you can!)
ctest -j 4  #for 4 threads of testing

-------------------------------------------------------------------------------

How to run a case (assuming debug build):

1) Go to Run > Debug Configurations.

2) Create a new Configuration and select your app (e.g. mops-app or camflow-app).

3) You'll need to change Arguments > Working directory to the location of the
   case that you are interested in, and also to add any arguments.
   
4) Hit debug.

-------------------------------------------------------------------------------

Viewing Documentation:

1) Execute ./etc/makeDocs to make the documentation.
   Options: -cleanall      Cleans all the source and libraries

2) Open doc/documentationIndex.html in a web browser. 
   Edit doc/mainpage to add your name!

-------------------------------------------------------------------------------

Remaining Tasks:

1) Edit all the visual studio project files.
2) done
3) done
4) Integrate the documentation better.
5) Sort out flamelab.

###############################################################################
Robert Patterson 07 June 2011
Robert.Patterson@wias-berlin.de

Laurence McGlashan 25 February 2011
lrm29@cam.ac.uk
###############################################################################
