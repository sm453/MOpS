# newMakefile
# Author: Robert I A Patterson <Robert.Patterson@wias-berlin.de>
# Copyright (C) 2011 Robert I A Patterson.

# Makefile for building the brush library as part of larger population
# balance solver projects 

# Licence:
#    This file is part of "brush".
#
#    brush is free software; you can redistribute it and/or
#    modify it under the terms of the GNU General Public License
#    as published by the Free Software Foundation; either version 2
#    of the License, or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#  Contact:
#    Prof Markus Kraft
#    Dept of Chemical Engineering
#    University of Cambridge
#    New Museums Site
#    Pembroke Street
#    Cambridge
#    CB2 3RA
#    UK
#
#    Email:       mk306@cam.ac.uk
#    Website:     http://como.cheng.cam.ac.uk

# Compiler options.
export debug=1
export profile=0

export path=.
src=$(path)/source
inc=$(path)/include
librelease=../../lib/release
libdebug=../../lib/debug

# C++ compiler.
cpp=g++
# Includes.
includes=-Iinclude -I../io/comostrings/include -I../utils/include -I../io/camxml/include \
         -I../sprogc/include -I../geometry/include -I../utils/include -I../sweepc/include \
         -I../mopsc/include

ifeq ($(debug),0)
  ifeq ($(profile),0)
    flag=-c -O2 $(includes) -Wall
    lib=$(librelease)
  else
    flag=-c -O2 $(includes)  -Wall -pg
    lib=$(librelease)
  endif
else
  flag=-c -O0 $(includes) -Wall -ggdb -pg -D_GLIBCXX_DEBUG
  lib=$(libdebug)
endif

# Target objects.
obj=reactor1d.o pred_corr_solver.o reset_chemistry.o simulator.o settings_io.o


# TARGET all: Compile to a static library (*.a).
all: $(obj)
	mkdir -p $(lib)
ifeq ($(debug),0)
	ar rc $(lib)/libbrush.a $(obj)
else
	ar rc $(lib)/libbrush_d.a $(obj)
endif

# Source code.
reactor1d.o: $(src)/reactor1d.cpp $(inc)/reactor1d.h $(inc)/brush_params.h
	$(cpp) $(flag) $(src)/reactor1d.cpp

pred_corr_solver.o: $(src)/pred_corr_solver.cpp $(inc)/pred_corr_solver.h $(inc)/brush_params.h
	$(cpp) $(flag) $(src)/pred_corr_solver.cpp

reset_chemistry.o: $(src)/reset_chemistry.cpp $(inc)/reset_chemistry.h $(inc)/reactor1d.h $(inc)/brush_params.h
	$(cpp) $(flag) $(src)/reset_chemistry.cpp

simulator.o: $(src)/simulator.cpp $(inc)/simulator.h $(inc)/brush_params.h
	$(cpp) $(flag) $(src)/simulator.cpp

settings_io.o: $(src)/settings_io.cpp $(inc)/settings_io.h $(inc)/brush_params.h
	$(cpp) $(flag) $(src)/settings_io.cpp

# TARGET clean: leave just source code.

clean:
	rm -rf $(path)/*.o \#* *~

cleanlibs:
	rm -rf $(path)/*.o \#* *~ $(librelease)/libbrush.a $(libdebug)/libbrush_d.a
