# Compiler options.
export debug=1
export profile=0

export path=.
src=$(path)/source
inc=$(path)/include
librelease=../../../lib/release
libdebug=../../../lib/debug

# C++ compiler.
cpp=g++
# Includes.
includes=-Iinclude

ifeq ($(debug),0)
  ifeq ($(profile),0)
    flag=-c -O2 $(includes) -Wall
    lib=$(librelease)
  else
    flag=-c -O2 $(includes) -Wall -pg
    lib=$(librelease)
  endif
else
  flag=-c -O0 $(includes) -Wall -ggdb -pg -D_GLIBCXX_DEBUG
  lib=$(libdebug)
endif

# Target objects.
obj=stringf.o unicodef.o xmlattribute.o xmlelement.o xmldocument.o

# TARGET all: Compile to a static library (*.a).
all: $(obj)
	mkdir -p $(lib)
ifeq ($(debug),0)
	ar rc $(lib)/libcamxml.a $(obj)
else
	ar rc $(lib)/libcamxml_d.a $(obj)
endif

# Source code.
stringf.o: $(src)/stringf.cpp $(inc)/stringf.h
	$(cpp) $(flag) $(src)/stringf.cpp

unicodef.o: $(src)/unicodef.cpp $(inc)/unicodef.h
	$(cpp) $(flag) $(src)/unicodef.cpp

xmlattribute.o: $(src)/xmlattribute.cpp $(inc)/xmlattribute.h $(inc)/unicodef.h
	$(cpp) $(flag) $(src)/xmlattribute.cpp

xmlelement.o: $(src)/xmlelement.cpp $(inc)/xmlelement.h $(inc)/unicodef.h $(inc)/stringf.h $(inc)/xmlattribute.h
	$(cpp) $(flag) $(src)/xmlelement.cpp

xmldocument.o: $(src)/xmldocument.cpp $(inc)/xmldocument.h $(inc)/unicodef.h $(inc)/xmlattribute.h $(inc)/xmlelement.h
	$(cpp) $(flag) $(src)/xmldocument.cpp

# TARGET clean: leave just source code.

clean:
	rm -rf $(path)/*.o \#* *~

cleanlibs:
	rm -rf $(path)/*.o \#* *~ $(librelease)/libcamxml.a $(libdebug)/libcamxml_d.a
